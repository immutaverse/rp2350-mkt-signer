name: 'rp2350-firmware-signer'
description: |
  PRE-ALPHA firmware signer action to enable secure boot
  for RP2350 series chips and pico2 '
inputs:
  FIRMWARE:
    description: 'Path to the previously generated uf2 firmware file'
    required: true
    default: 'workspace/firmware/firmware.uf2'
  BUILD_ACTION:
    description: |
      sign or build. 
      When set to sign FIRMWARE is MANDATORY 
      When set to build SOURCE_DIR is mandatory'
    required: true
    default: 'sign'
  OTP_FILE:
    description: |
      path to the OTP file to be used for signing
      you should have any fuse bits you need set 
      already defined in this file and the signer 
      will update it with the public key ready to 
      burn into your chips.  
    required: true
    default: 'workspace/firmware/otp_file.json'
  BOARD_NAME:
    description: | 
      this is the boardname passed into the build
      scripts.  normally only used when build_action
      is set to build. 
    required: false
    default: 'pico2'
  SOURCE_DIR: 
    description: |
      source directory containing source code to build
      with the SDK file.  Mandatory when build_action 
      is set to build. This is the directory where 
      you have saved your CMakeLists.txt See and example
      at https://github.com/immutaverse/rp2350-ex-blink-fast      
    required: false
    default: 'GitHub'
  SIGN_METADATA:
    description: |
      path to file contaiing Metadata to be included 
      in the signed firmware file.  This is a dictionary 
      of key value pairs.  Not all chip signiners use this
      the pico2 signer does not.
    required: false
    default: '{}'

  PRIVATE_KEY:
    description: |
      Base64 encoded private key normally loaded from
      github secret but you can provide it from 
      any source.   
    required: true    

  DOCKER_ACCESS_TOKEN:
    description: |
      Access key for the docker image to pull the 
      image from the registry.  This is normally 
      a github secret but you can provide it from 
      any source.   
    required: true
  

#outputs:
#  message:
#    description: 'message from the executing the action '

branding:
  icon: 'award'
  color: 'green'


runs:
  using: "composite"

  steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set Environment Variables
        shell: bash
        run: |
          echo "DOCKER_WORKSPACE=docker_workspace" >> $GITHUB_ENV
          echo "DW_FIRMWARE=docker_workspace/firmware" >> $GITHUB_ENV
          echo "DW_OTP=docker_workspace/otp.json" >> $GITHUB_ENV
          echo "DW_FUSE=docker_workspace/otp.sec-boot-blow-fuses.sh" >> $GITHUB_ENV
          echo "BUILD_ACTION=${{ inputs.BUILD_ACTION }}" >> $GITHUB_ENV
          echo "FIRMWARE=${{ inputs.FIRMWARE }}" >> $GITHUB_ENV
          echo "OTP_FILE=${{ inputs.OTP_FILE }}" >> $GITHUB_ENV
          echo "PRIVATE_KEY=${{ inputs.PRIVATE_KEY }}" >> $GITHUB_ENV
          echo "DOCKER_ACCESS_TOKEN=${{ inputs.DOCKER_ACCESS_TOKEN }}" >> $GITHUB_ENV
          echo "BOARD_NAME=${{ inputs.BOARD_NAME }}" >> $GITHUB_ENV
          echo "SOURCE_DIR=${{ inputs.SOURCE_DIR }}" >> $GITHUB_ENV
      

      # RE: Principle of least access we only want to copy 
      # things needed for the docker image to perform the signing
      # to a directory where the docker image has access to them 
      # and we do not want to allow docker image access to full 
      # agent workspace file system. 
      - name: prepare signing input
        shell: bash
        run: |
          echo "pwd = $(pwd)"
          echo "github_workspace path=$GITHUB_WORKSPACE"        
          echo "docker_workspace path=$DOCKER_WORKSPACE"  
          echo "DW_WSP=$GITHUB_WORKSPACE/$DOCKER_WORKSPACE"
          echo "curr ls"
          ls -l
          echo "ls .."
          ls -l ..
          echo "ls ../.."
          ls -l ../..
          echo "ls github.action_path"
          ls -l ${{ github.action_path }}
          # Actual script to copy the inputs
          python3 ${{ github.action_path }}/prepare-sign-input.py          
          echo Docker workspace $GITHUB_WORKSPACE/$DOCKER_WORKSPACE after prepare-sign-input
          ls -l $GITHUB_WORKSPACE/$DOCKER_WORKSPACE
          echo "finish preapring signing input"
          
          
      - name: Log in to GitHub Container Registry (GHCR)
        shell: bash
        run: echo "${{ inputs.DOCKER_ACCESS_TOKEN }}" | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin

      - name: pull docker image from registry
        shell: bash
        run: |
          echo "start docker pull"
          docker pull ghcr.io/immutaverse/pico-sign:latest          
          echo "docker pull complete"

      #TODO: We need to allow a version of the docker immage to be 
      #  specified so users can pull the one with the libraries they
      #  desire without needing a new marketplace action for each one.
      - name: Run Docker Container to perform the signing
        shell: bash
        run: |
          echo "start docker run"
          docker run --rm -a stdout -a stderr -v "$GITHUB_WORKSPACE/$DOCKER_WORKSPACE:/workspace" \
            -e PRIVATE_KEY="$PRIVATE_KEY" \
            -e FIRMWARE="$DW_FIRMWARE" \
            -e OTP_FILE="$DW_OTP" \
            -e BOARD_NAME="${{ inputs.BOARD_NAME }}" \
            -e BUILD_ACTION="${{ inputs.BUILD_ACTION }}" \
            -e SIGN_LOG_LEVEL="${{ inputs.SIGN_LOG_LEVEL }}" \
            pico-builder:latest
          echo "docker run finished"


      - name: Copy Signed Assets Back normal target locations
        shell: bash
        run: |
          # TODO: THESE ARE  ARE NOT QUITE RIGHT NEED TO COPY FROM OUR
          # WELL KNOWN LOCATION BACK TO NAME PROVIDED BY INPUT PARMS.
          # Probably need to do this in python 
          mkdir -p "$GITHUB_WORKSPACE/output"
          cp "$GITHUB_WORKSPACE/$DOCKER_WORKSPACE/firmware.signed" "$GITHUB_WORKSPACE/output/"
          cp "$GITHUB_WORKSPACE/$DOCKER_WORKSPACE/otp-final.json" "$GITHUB_WORKSPACE/output/"
          cp "$GITHUB_WORKSPACE/$DOCKER_WORKSPACE/otp.sec-boot-blow-fuses.sh" "$GITHUB_WORKSPACE/output/"

