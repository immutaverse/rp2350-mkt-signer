name: 'rp2350-firmware-signer'
description: |
  PRE-ALPHA firmware signer action to enable secure boot
  for RP2350 series chips and pico2 '
inputs:
  SIGN_WORKSPACE:
    description:
      subdirectory you want the siging tool to work in
    required: true

  FIRMWARE:
    description: 
      file name of previously generated uf2 firmware file
      must be inside of SIGN_WORKSPACE directory
      eg: firmware.uf2  we assume that you have copied
      the firmware file inside of sign_workspace.
    required: true
    

  FIRMWARE_OUTPUT
    description:
      filename to write the generated signed firmware 
      to.  This is a simple filename it will be saved
      in SIGN_WORKSPACE directory.
    required: true

  BUILD_ACTION:
    description: |
      sign or build. 
      When set to sign FIRMWARE is MANDATORY 
      When set to build SOURCE_DIR is mandatory'
    required: true
    default: 'sign'

  OTP_FILE:
    description: |
      Filename of any input OTP file used to set
      any FUSE bits other than those needed 
      to enable secure boot.  This is assumed 
      to be a simple path inside of SIGN_WORKSPACe.
    required: true
    default: 'workspace/firmware/otp_file.json'

  BOARD_NAME:
    description: | 
      this is the boardname passed into the build
      scripts.  normally only used when build_action
      is set to build. 
    required: false
    default: 'pico2'

  SOURCE_DIR: 
    description: |
      source directory containing source code to build
      with the SDK file.  Mandatory when build_action 
      is set to build. This is the directory where 
      you have saved your CMakeLists.txt See and example
      at https://github.com/immutaverse/rp2350-ex-blink-fast      
    required: false
    default: 'GitHub'

  SIGN_METADATA:
    description: |
      path to file contaiing Metadata to be included 
      in the signed firmware file.  This is a dictionary 
      of key value pairs.  Not all chip signiners use this
      the pico2 signer does not.
    required: false
    default: '{}'

  SIGN_LOG_LEVEL:
    description: |
      Log level for the signing process.  This is a 
      string that can be set to debug, info, warning, 
      error, or critical.  The default is info. 
    required: false
    default: 'DEBUG'

  PRIVATE_KEY:
    description: |
      Base64 encoded private key normally loaded from
      github secret but you can provide it from 
      any source.   
    required: true    

  SIGN_ACCESS_TOKEN:
    description: |
      Access key for to allow access to the SIGNING Utility      
      image from the registry.  This is normally 
      a github secret but you can provide it from 
      any source.   
    required: true
  

#outputs:
#  message:
#    description: 'message from the executing the action '

branding:
  icon: 'award'
  color: 'green'


runs:
  using: "composite"

  steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set Environment Variables
        shell: bash
        run: |
          export SIGN_WORKSPACE="${{ inputs.SIGN_WORKSPACE }}" 
          #echo "DW_FIRMWARE=docker_workspace/firmware" >> $GITHUB_ENV
          #echo "DW_OTP=docker_workspace/otp.json" >> $GITHUB_ENV
          #echo "DW_FUSE=docker_workspace/otp.sec-boot-blow-fuses.sh" >> $GITHUB_ENV
          #echo "BUILD_ACTION=${{ inputs.BUILD_ACTION }}" >> $GITHUB_ENV
          #echo "FIRMWARE=${{ inputs.FIRMWARE }}" >> $GITHUB_ENV
          #echo "OTP_FILE=${{ inputs.OTP_FILE }}" >> $GITHUB_ENV
          #echo "PRIVATE_KEY=${{ inputs.PRIVATE_KEY }}" >> $GITHUB_ENV
          #echo "DOCKER_ACCESS_TOKEN=${{ inputs.DOCKER_ACCESS_TOKEN }}" >> $GITHUB_ENV
          #echo "BOARD_NAME=${{ inputs.BOARD_NAME }}" >> $GITHUB_ENV
          #echo "SOURCE_DIR=${{ inputs.SOURCE_DIR }}" >> $GITHUB_ENV
          # Location of resources once mounted inside of GITUB
          #echo "MNT_FIRMWARE=/workspace/firmware" >> $GITHUB_ENV
          #echo "MNT_OTP=/workspace/otp.json" >> $GITHUB_ENV
          #echo "MNT_BLOW=/workspace/firmware-blow-fuses.sh" >> $GITHUB_ENV
          # Generate a timestamp (format: YYYY-MM-DD.HH.MM.SS)          
          #export TSOUTDIR="$DOCKER_WORKSPACE/out/$(date +"%Y-%m-%d.%H.%M.%S")"          
          #echo "TSOUTDIR=$TSOUTDIR" >> "$GITHUB_ENV"                                    
          #echo "TSOUTDIR=$TSOUTDIR"
      

      # RE: Principle of least access we only want to copy 
      # things needed for the docker image to perform the signing
      # to a directory where the docker image has access to them 
      # and we do not want to allow docker image access to full 
      # agent workspace file system. 
      #- name: prepare signing input
      #  shell: bash
      #  run: |
      #    echo "pwd = $(pwd)"
      #    echo "github_workspace path=$GITHUB_WORKSPACE"        
      #    echo "docker_workspace path=$DOCKER_WORKSPACE"  
      #    echo "DW_WSP=$GITHUB_WORKSPACE/$DOCKER_WORKSPACE"
      #    echo "curr ls"
      #    ls -l
      #    echo "ls .."
      #    ls -l ..
      #    echo "ls ../.."
      #    ls -l ../..
      #    echo "ls github.action_path"
      #    ls -l ${{ github.action_path }}
      #    # Actual script to copy the inputs
      #    python3 ${{ github.action_path }}/prepare-sign-input.py          
      #    echo Docker workspace $GITHUB_WORKSPACE/$DOCKER_WORKSPACE after prepare-sign-input
      #    ls -l $GITHUB_WORKSPACE/$DOCKER_WORKSPACE
      #    echo "finish preapring signing input"
      #    echo "docker_workspace path=$DOCKER_WORKSPACE"
      #    ls -l $DOCKER_WORKSPACE
          
          
      - name: Log in to GitHub Container Registry (GHCR)
        shell: bash
        run: echo "${{ inputs.SIGN_ACCESS_TOKEN }}" | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin

      - name: pull docker image from registry
        shell: bash
        run: |
          echo "start docker pull"
          docker pull ghcr.io/immutaverse/pico-sign:latest          
          echo "docker pull complete"

      #TODO: We need to allow a version of the docker immage to be 
      #  specified so users can pull the one with the libraries they
      #  desire without needing a new marketplace action for each one.
      - name: Run Docker Container to perform the signing
        shell: bash
        run: |
          echo "start docker run"
          docker run --rm -a stdout -a stderr -v "$GITHUB_WORKSPACE/$DOCKER_WORKSPACE:/docker_workspace" \
            -e PRIVATE_KEY="$PRIVATE_KEY" \
            -e FIRMWARE="${{ inputs.SIGN_WORKSPACE }}/${{ $FIRMWARE" \
            -e OTP_FILE="${{ inputs.OTP_FILE }} / ${{ inputs.OTP_FILE }}" \
            -e FIRMWARE_OUTPUT="${{ inputs.sign_WORKSPACE }}/{{ inputs.FIRMWARE_OUTPUT }}" \
            -e BOARD_NAME="${{ inputs.BOARD_NAME }}" \
            -e BUILD_ACTION="${{ inputs.BUILD_ACTION }}" \
            -e SIGN_LOG_LEVEL="${{ inputs.SIGN_LOG_LEVEL }}" \
            ghcr.io/immutaverse/pico-sign:latest
          echo "docker run finished"

